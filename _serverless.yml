# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: splitdeployfirst
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  # apiGateway:
  #   restApiId: abcoefgh # REST API resource ID. Default is generated by the framework
  #   restApiRootResourceId: bbbbbbbb # Root resource, represent as / path
  #   websocketApiId: cccccccc # Websocket API resource ID. Default is generated by the framework
  #   restApiResources:
  #     /splitdeployfirst: dddddddd
  #   description: Some Description # optional - description of deployment history


# you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  profile: default

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:*"
  #     Resource: "*"
  #   - Effect: "Allow"
  #     Action:
  #       - "dynamodb:*"
  #     Resource: "*"

  plugins:
  - serverless-dependson-plugin

custom:
  dependsOn:
    # Optional. Defaults to true, set to false to disable the plugin
    enabled: true
    # Optional. Sets amount of lambda deployment parallelization plugin will attempt to create. Defaults to 1
    chains: 3

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /splitdeploy/hello
          method: get

  AuthorizerLambda:
    handler: handler.authorizer
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    SuzukimaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: suzukima-splitdeployfirst-bucket

    SuzukimaDynamo:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: suzukima-splitdeployfirst-dynamo
        AttributeDefinitions:
          -
            AttributeName: app_name
            AttributeType: S
          -
            AttributeName: date_time_num
            AttributeType: N
        KeySchema:
          -
            AttributeName: app_name
            KeyType: HASH
          -
            AttributeName: date_time_num
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

  Outputs:
    SplitDeployFirstS3Arn:
      Value:
        'Fn::GetAtt': [SuzukimaBucket, Arn]
      Export:
        Name: ${self:service}-SplitDeployFirstS3Arn-${self:provider.stage}
    SplitDeployFirstDynamoArn:
      Value:
        'Fn::GetAtt': [SuzukimaDynamo, Arn]
      Export:
        Name: ${self:service}-SplitDeployFirstDynamoArn-${self:provider.stage}
    apiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-restApiId-${self:provider.stage}
    apiGatewayRestApiRootResourceId:
      Value:
        'Fn::GetAtt': [ApiGatewayRestApi, RootResourceId]
      Export:
        Name: ${self:service}-rootResourceId-${self:provider.stage}
    apiGatewayResourcesSplitDeploy:
      Value:
        Ref: ApiGatewayResourceSplitdeploy
      Export:
        Name: ${self:service}-ResourcesSplitDeploy-${self:provider.stage}
    SplitDeployFirstAuthorizerArn:
      Value:
        'Fn::GetAtt': [AuthorizerLambdaLambdaFunction, Arn]
      Export:
        Name: ${self:service}-SplitDeployFirstAuthorizerArn-${self:provider.stage}

